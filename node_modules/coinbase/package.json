{
  "name": "coinbase",
  "version": "0.0.0",
  "description": "wrapper for the coinbase bitcoin wallet & exchange API",
  "main": "lib/index.js",
  "scripts": {
    "test": "DEBUG= ./node_modules/.bin/mocha -t 5000"
  },
  "repository": {
    "type": "git",
    "url": "git@github.com:mateodelnorte/coinbase.git"
  },
  "dependencies": {
    "debug": "0.7.2",
    "lodash": "1.1.1",
    "request": "2.16.6"
  },
  "devDependencies": {
    "mocha": "*",
    "sinon": "*",
    "should": "*"
  },
  "keywords": [
    "coinbase",
    "bitcoin",
    "wallet"
  ],
  "author": {
    "name": "Matt Walters"
  },
  "license": "BSD",
  "readme": "Coinbase\n=====\n\nCoinbase is a wrapper around the Coinbase.com bitcoin wallet and exchange API.\n\n***Note that the Coinbase api is undergoing development. Methods here may break and documentation at https://coinbase.com/api/doc does not always appear to match the api's current status. As time goes on, things will solidify. For functionality that is not yet implemented, and where you might be able to help out, see the TODO list at bottom of this page. \nHow to use it: \n\nRequire coinbase\n\n```\nvar Coinbase = require('coinbase');\nvar coinbase = new Coinbase({\n  APIKey: process.env.COINBASE_API_KEY\n});\n```\n\nMake a call to the API using a chosen method. \n\n```\ncoinbase.account.balance(function (err, data) {\n  if (err) throw err;\n  log('data: ' + util.inspect(data));\n  data.should.have.property('amount');\n  data.should.have.property('currency', 'BTC');\n  done();\n});\n```\n\nThe following methods have been implemented and work against the Coinbase api. \n\n# TOC\n   - [coinbase.account.balance](#coinbaseaccountbalance)\n   - [coinbase.account.receiveAddress](#coinbaseaccountreceiveaddress)\n   - [coinbase.account.generateReceiveAddress](#coinbaseaccountgeneratereceiveaddress)\n   - [coinbase.button](#coinbasebutton)\n   - [coinbase.buy](#coinbasebuy)\n   - [coinbase.contacts](#coinbasecontacts)\n   - [coinbase.currencies.list](#coinbasecurrencieslist)\n   - [coinbase.currencies.exchangeRates](#coinbasecurrenciesexchangerates)\n   - [coinbase.orders.list](#coinbaseorderslist)\n   - [coinbase.orders.get](#coinbaseordersget)\n   - [coinbase.prices.buy](#coinbasepricesbuy)\n   - [coinbase.prices.sell](#coinbasepricessell)\n   - [coinbase.transactions.list](#coinbasetransactionslist)\n   - [coinbase.transactions.get](#coinbasetransactionsget)\n   - [coinbase.transfers.list](#coinbasetransferslist)\n<a name=\"\"></a>\n \n<a name=\"coinbaseaccountbalance\"></a>\n# coinbase.account.balance\nshould return account balance.\n\n```js\ncoinbase.account.balance(function (err, data) {\n  if (err) throw err;\n  log('data: ' + util.inspect(data));\n  data.should.have.property('amount');\n  data.should.have.property('currency', 'BTC');\n  done();\n});\n```\n\n<a name=\"coinbaseaccountreceiveaddress\"></a>\n# coinbase.account.receiveAddress\nshould return the user's current bitcoin receive address.\n\n```js\ncoinbase.account.receiveAddress(function (err, data) {\n  if (err) throw err;\n  log('data: ' + util.inspect(data));\n  data.should.have.property('success', true);\n  data.should.have.property('address');\n  data.should.have.property('callback_url');\n  done();\n});\n```\n\n<a name=\"coinbaseaccountgeneratereceiveaddress\"></a>\n# coinbase.account.generateReceiveAddress\nshould generate a new receive address.\n\n```js\ncoinbase.account.generateReceiveAddress(function (err, data) {\n  if (err) throw err;\n  log('data: ' + util.inspect(data));\n  data.should.have.property('success', true);\n  data.should.have.property('address');\n  data.should.have.property('callback_url');\n  done();\n});\n```\n\nshould generate a new receive address with callback.\n\n```js\ncoinbase.account.generateReceiveAddress('https://www.example.com/callback', function (err, data) {\n  if (err) throw err;\n  log('data: ' + util.inspect(data));\n  data.should.have.property('success', true);\n  data.should.have.property('address');\n  data.should.have.property('callback_url'); // TODO: enforce callback value ***api is currently not passing this back. may be a bug in the api\n  done();\n});\n```\n\n<a name=\"coinbasebutton\"></a>\n# coinbase.button\nshould generate a new button.\n\n```js\nvar param = {\n              \"button\": {\n                \"name\": 'test',\n                \"price_string\": '1.23',\n                \"price_currency_iso\": 'USD',\n                \"custom\": 'Order123',\n                \"description\": 'Sample description',\n                \"type\": 'buy_now',\n                \"style\": 'custom_large'\n              }\n            };\ncoinbase.buttons.create(param, function (err, data) {\n  if (err) throw err;\n  log('data: ' + util.inspect(data));\n  data.should.have.property('success', true);\n  data.should.have.property('button');\n  data.button.should.have.property('code');\n  data.button.should.have.property('type');\n  data.button.should.have.property('style');\n  data.button.should.have.property('text');\n  data.button.should.have.property('name');\n  data.button.should.have.property('description');\n  data.button.should.have.property('custom');\n  data.button.should.have.property('price');\n  done();\n});\n```\n\n<a name=\"coinbasebuy\"></a>\n# coinbase.buy\n<a name=\"coinbasecontacts\"></a>\n# coinbase.contacts\nshould return the user's previously emailed contacts.\n\n```js\ncoinbase.contacts(function (err, data) {\n  if (err) throw err;\n  log('data: ' + util.inspect(data));\n  data.should.have.property('contacts');\n  data.should.have.property('total_count');\n  data.should.have.property('num_pages');\n  data.should.have.property('current_page');\n  done();\n});\n```\n\n<a name=\"coinbasecurrencieslist\"></a>\n# coinbase.currencies.list\nshould return list of supported currencies.\n\n```js\ncoinbase.currencies.list(function (err, data) {\n  if (err) throw err;\n  log('data: ' + util.inspect(data));\n  data.length.should.be.above(0);\n  done();\n});\n```\n\n<a name=\"coinbasecurrenciesexchangerates\"></a>\n# coinbase.currencies.exchangeRates\nshould return current currency exchange rates.\n\n```js\ncoinbase.currencies.exchangeRates(function (err, data) {\n  if (err) throw err;\n  log('data: ' + util.inspect(data));\n  data.should.have.property('btc_to_usd');\n  data.should.have.property('usd_to_btc');\n  done();\n});\n```\n\n<a name=\"coinbaseorderslist\"></a>\n# coinbase.orders.list\nshould return list of supported orders.\n\n```js\ncoinbase.orders.list(function (err, data) {\n  if (err) throw err;\n  log('data: ' + util.inspect(data));\n  data.should.have.property('orders');\n  data.should.have.property('total_count');\n  data.should.have.property('num_pages');\n  data.should.have.property('current_page');\n  done();\n});\n```\n\n<a name=\"coinbaseordersget\"></a>\n# coinbase.orders.get\n<a name=\"coinbasepricesbuy\"></a>\n# coinbase.prices.buy\nshould return the total buy price for some bitcoin amount.\n\n```js\ncoinbase.prices.buy(function (err, data) {\n  if (err) throw err;\n  log('data: ' + util.inspect(data));\n  data.should.have.property('amount');\n  data.should.have.property('currency');\n  done();\n});\n```\n\n<a name=\"coinbasepricessell\"></a>\n# coinbase.prices.sell\nshould return the total sell price for some bitcoin amount.\n\n```js\ncoinbase.prices.sell(function (err, data) {\n  if (err) throw err;\n  log('data: ' + util.inspect(data));\n  data.should.have.property('amount');\n  data.should.have.property('currency');\n  done();\n});\n```\n\n<a name=\"coinbasetransactionslist\"></a>\n# coinbase.transactions.list\nshould return the user's most recent transactions.\n\n```js\ncoinbase.transactions.list(function (err, data) {\n  if (err) throw err;\n  log('data: ' + util.inspect(data));\n  data.should.have.property('current_user');\n  data.should.have.property('balance');\n  data.should.have.property('total_count');\n  data.should.have.property('transactions');\n  done();\n});\n```\n\n<a name=\"coinbasetransactionsget\"></a>\n# coinbase.transactions.get\n<a name=\"coinbasetransferslist\"></a>\n# coinbase.transfers.list\nshould return the user's most recent transfers.\n\n```js\ncoinbase.transfers.list(function (err, data) {\n  if (err) throw err;\n  log('data: ' + util.inspect(data));\n  data.should.have.property('transfers');\n  data.should.have.property('total_count');\n  data.should.have.property('num_pages');\n  data.should.have.property('current_page');\n  done();\n});\n```\n\nTODO: \n\nThe api currently only supports access via the API Key method. Oauth is next. \n\nThe following methods are implemented, but not yet tested: \n\n- GET /api/v1/orders/:id\n- GET /api/v1/transactions/:id\n\nThe following methods are implemented, but don't seem to match the actual api (parameters or constraints cause failure):\n\n- POST /api/v1/buys *\n\nThe following methods are not yet implemented: \n\n- POST /api/v1/sells\n- POST /api/v1/transactions/send_money\n- POST /api/v1/transactions/request_money\n- PUT /api/v1/transactions/:id/resend_request\n- DELETE /api/v1/transactions/:id/cancel_request\n- PUT /api/v1/transactions/:id/complete_request\n- POST /api/v1/users\n- PUT /api/v1/users/:id\n\n\\* The following error is returned from the cb api when calling /buys: \n\n  1) coinbase #buys should buy one btc:\n\n```\n  CoinbaseError: Price can't be blank\n      at Request._callback (/Users/matt/development/coinbase/lib/index.js:67:22)\n      at Request.self.callback (/Users/matt/development/coinbase/node_modules/request/index.js:142:22)\n      at Request.EventEmitter.emit (events.js:98:17)\n      at Request.<anonymous> (/Users/matt/development/coinbase/node_modules/request/index.js:856:14)\n      at Request.EventEmitter.emit (events.js:117:20)\n      at IncomingMessage.<anonymous> (/Users/matt/development/coinbase/node_modules/request/index.js:808:12)\n      at IncomingMessage.EventEmitter.emit (events.js:117:20)\n      at _stream_readable.js:895:16\n      at process._tickCallback (node.js:415:13)\n```",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/mateodelnorte/coinbase/issues"
  },
  "_id": "coinbase@0.0.0",
  "dist": {
    "shasum": "ce92e1a72fd9a1e49328a5fc83163b4d108d4b2a"
  },
  "_from": "coinbase@",
  "_resolved": "https://registry.npmjs.org/coinbase/-/coinbase-0.0.0.tgz"
}
